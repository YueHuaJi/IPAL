#!/usr/bin/env python3
import argparse
import datetime
import gzip
import json
from pathlib import Path

import matplotlib
import matplotlib.pyplot as plt

IDSs = [ ]
ATTACKFILE = None
DATASETNAME = ""
GAPTIME = 30 # Gap has to be at least x minutes to be skipped

def plot(ax):
    global IDSs, ATTACKFILE, DATASETNAME, GAPTIME

    # PLOT IDS ALARMS
    I = 1
    for IDS, label in IDSs:
        I -= 1
        gaps = []
        T = []
        ALERT = []

        print("Processing: {} ({}/{})".format(label, -I + 1, len(IDSs)))
        try:
            with gzip.open(IDS) as f:
                last_timestamp=None
                line = f.readline()

                while line:
                    js = json.loads(line)
                    t = datetime.datetime.fromtimestamp(js["timestamp"])

                    if last_timestamp is None:
                        last_timestamp = t
                        START = js["timestamp"]
                    elif t - last_timestamp > datetime.timedelta(minutes=GAPTIME):
                        delta = t - last_timestamp
                        gaps.append( (js["timestamp"] - START, delta) )
                    last_timestamp = t

                    relativ_time = js["timestamp"] - START
                    for gap in gaps:
                        relativ_time -= gap[1].total_seconds()

                    T.append( relativ_time )
                    ALERT.append(js["ids"])

                    line = f.readline()
        except EOFError:
            print("WARNING: File not closed properly! Some data is still missing!\n")


        ax.fill_between(T, I-1, I, where=ALERT, facecolor=u'#000000', linewidth=.1)
    END = js["timestamp"]

    # PLOT ATTACKS
    print("Processing attacks")
    ATTACKS = []
    with open(ATTACKFILE) as f:

        for attack in json.load(f):
            start =  attack["start"] - START
            end = attack["end"] - START

            for gap in gaps:
                if attack["start"] - START > gap[0]:
                    start -= gap[1].total_seconds()
                    end -= gap[1].total_seconds()

            borders = (start, end)
            ATTACKS.append(borders)

            rect = matplotlib.patches.Rectangle((borders[0], 0), borders[1] - borders[0], 1, color=u'#a50303', linewidth=0)
            ax.add_patch(rect)

    # PLOT SETTINGS

    end = END - START
    for gap in gaps:
        end -= gap[1].total_seconds()

    Nticks = 10
    ticksEvery = end // 3600 / Nticks
    ax.set_xticks( [ ticksEvery * 3600 * i for i in range(Nticks * 2) ] )
    ax.set_xticklabels([ "%.1f" % (ticksEvery * i) for i in range(Nticks * 2) ])
    ax.set_xlim(0, end)

    ax.set_ylabel(DATASETNAME, fontweight=1000, fontsize='x-large', labelpad=5 )
    ax.yaxis.set_label_position("right")

    ax.set_ylim(I-1, 1)
    ax.set_yticks([x+0.5 for x in range(-len(IDSs), 1)][::-1])
    ax.set_yticklabels(["Attacks"] + [x[1] for x in IDSs])
    ax.tick_params(axis='y', which='both', color='white')


def main():
    global IDSs, ATTACKFILE, DATASETNAME, GAPTIME

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--attacks",
        metavar="attacks",
        help="Path to attacks.json file of the dataset.",
        required=True,
    )

    parser.add_argument(
        "--dataset",
        metavar="dataset",
        help="Name of the dataset to put on the plot (Default: '')",
        required=False,
    )

    parser.add_argument(
        "--title",
        metavar="title",
        help="Title to put on the plot (Default: '')",
        required=False,
    )

    parser.add_argument(
        "--output",
        metavar="output",
        help="File to save the plot to. (Default: '': Show in matplotlib window)",
        required=False,
    )

    parser.add_argument(
        'IDSs',
        metavar='IDS',
        nargs='+',
        help='IDS classification files'
    )

    args = parser.parse_args()

    IDSs = [ (IDS, Path(IDS).stem.replace(".json", "").replace(".ipal", "").replace(".state", "")) for IDS in args.IDSs ]
    ATTACKFILE = args.attacks
    if args.dataset:
        DATASETNAME = args.dataset

    # Plot
    fig, ax = plt.subplots(1)

    plt.xlabel("Passed Time [hours]")
    plot(ax)

    if args.title:
        plt.title(args.title)

    print("Plotting...")
    if args.output is not None:
        plt.savefig(args.output)
    else:
        plt.show()

if __name__ == "__main__":
    main()
